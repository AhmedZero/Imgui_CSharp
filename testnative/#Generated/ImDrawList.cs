// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.DearImGui.Internal;
using System;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.DearImGui
{
    [StructLayout(LayoutKind.Explicit, Size = 200)]
    public unsafe partial struct ImDrawList
    {
        [FieldOffset(0)] public ImVector<ImDrawCmd> CmdBuffer;

        [FieldOffset(16)] public ImVector<ushort> IdxBuffer;

        [FieldOffset(32)] public ImVector<ImDrawVert> VtxBuffer;

        [FieldOffset(48)] public ImDrawListFlags Flags;

        [FieldOffset(52)] public uint _VtxCurrentIdx;

        [FieldOffset(56)] public ImDrawListSharedData* _Data;

        [FieldOffset(64)] public byte* _OwnerName;

        [FieldOffset(72)] public ImDrawVert* _VtxWritePtr;

        [FieldOffset(80)] public ushort* _IdxWritePtr;

        [FieldOffset(88)] public ImVector<Vector4> _ClipRectStack;

        [FieldOffset(104)] public ImVector<nint> _TextureIdStack;

        [FieldOffset(120)] public ImVector<Vector2> _Path;

        [FieldOffset(136)] public ImDrawCmdHeader _CmdHeader;

        [FieldOffset(168)] public ImDrawListSplitter _Splitter;

        [FieldOffset(192)] public float _FringeScale;

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper14", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(ImDrawList* @this, ImDrawListSharedData* shared_data);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImDrawList(ImDrawListSharedData* shared_data)
        {
            fixed (ImDrawList* @this = &this)
            { Constructor_PInvoke(@this, shared_data); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper15", ExactSpelling = true)]
        private static extern void Destructor_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Destructor()
        {
            fixed (ImDrawList* @this = &this)
            { Destructor_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z", ExactSpelling = true)]
        private static extern void PushClipRect_PInvoke(ImDrawList* @this, Vector2 clip_rect_min, Vector2 clip_rect_max, byte intersect_with_current_clip_rect);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PushClipRect(Vector2 clip_rect_min, Vector2 clip_rect_max, bool intersect_with_current_clip_rect = false)
        {
            fixed (ImDrawList* @this = &this)
            { PushClipRect_PInvoke(@this, clip_rect_min, clip_rect_max, Unsafe.As<bool, byte>(ref intersect_with_current_clip_rect)); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PushClipRectFullScreen@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void PushClipRectFullScreen_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PushClipRectFullScreen()
        {
            fixed (ImDrawList* @this = &this)
            { PushClipRectFullScreen_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PopClipRect@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void PopClipRect_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PopClipRect()
        {
            fixed (ImDrawList* @this = &this)
            { PopClipRect_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PushTextureID@ImDrawList@@QEAAXPEAX@Z", ExactSpelling = true)]
        private static extern void PushTextureID_PInvoke(ImDrawList* @this, void* texture_id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PushTextureID(void* texture_id)
        {
            fixed (ImDrawList* @this = &this)
            { PushTextureID_PInvoke(@this, texture_id); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PopTextureID@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void PopTextureID_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PopTextureID()
        {
            fixed (ImDrawList* @this = &this)
            { PopTextureID_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetClipRectMin@ImDrawList@@QEBA?AUImVec2@@XZ", ExactSpelling = true)]
        private static extern Vector2* GetClipRectMin_PInvoke(ImDrawList* @this, Vector2* __returnBuffer);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Vector2 GetClipRectMin()
        {
            Vector2 __returnBuffer;

            fixed (ImDrawList* @this = &this)
            { GetClipRectMin_PInvoke(@this, &__returnBuffer); }

            return __returnBuffer;
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetClipRectMax@ImDrawList@@QEBA?AUImVec2@@XZ", ExactSpelling = true)]
        private static extern Vector2* GetClipRectMax_PInvoke(ImDrawList* @this, Vector2* __returnBuffer);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Vector2 GetClipRectMax()
        {
            Vector2 __returnBuffer;

            fixed (ImDrawList* @this = &this)
            { GetClipRectMax_PInvoke(@this, &__returnBuffer); }

            return __returnBuffer;
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z", ExactSpelling = true)]
        private static extern void AddLine_PInvoke(ImDrawList* @this, Vector2* p1, Vector2* p2, uint col, float thickness);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddLine(in Vector2 p1, in Vector2 p2, uint col, float thickness = 1f)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p1P = &p1)
            fixed (Vector2* __p2P = &p2)
            { AddLine_PInvoke(@this, __p1P, __p2P, col, thickness); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z", ExactSpelling = true)]
        private static extern void AddRect_PInvoke(ImDrawList* @this, Vector2* p_min, Vector2* p_max, uint col, float rounding, ImDrawFlags flags, float thickness);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddRect(in Vector2 p_min, in Vector2 p_max, uint col, float rounding = 0f, ImDrawFlags flags = ImDrawFlags.None, float thickness = 1f)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p_minP = &p_min)
            fixed (Vector2* __p_maxP = &p_max)
            { AddRect_PInvoke(@this, __p_minP, __p_maxP, col, rounding, flags, thickness); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z", ExactSpelling = true)]
        private static extern void AddRectFilled_PInvoke(ImDrawList* @this, Vector2* p_min, Vector2* p_max, uint col, float rounding, ImDrawFlags flags);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddRectFilled(in Vector2 p_min, in Vector2 p_max, uint col, float rounding = 0f, ImDrawFlags flags = ImDrawFlags.None)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p_minP = &p_min)
            fixed (Vector2* __p_maxP = &p_max)
            { AddRectFilled_PInvoke(@this, __p_minP, __p_maxP, col, rounding, flags); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z", ExactSpelling = true)]
        private static extern void AddRectFilledMultiColor_PInvoke(ImDrawList* @this, Vector2* p_min, Vector2* p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddRectFilledMultiColor(in Vector2 p_min, in Vector2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p_minP = &p_min)
            fixed (Vector2* __p_maxP = &p_max)
            { AddRectFilledMultiColor_PInvoke(@this, __p_minP, __p_maxP, col_upr_left, col_upr_right, col_bot_right, col_bot_left); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z", ExactSpelling = true)]
        private static extern void AddQuad_PInvoke(ImDrawList* @this, Vector2* p1, Vector2* p2, Vector2* p3, Vector2* p4, uint col, float thickness);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddQuad(in Vector2 p1, in Vector2 p2, in Vector2 p3, in Vector2 p4, uint col, float thickness = 1f)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p1P = &p1)
            fixed (Vector2* __p2P = &p2)
            fixed (Vector2* __p3P = &p3)
            fixed (Vector2* __p4P = &p4)
            { AddQuad_PInvoke(@this, __p1P, __p2P, __p3P, __p4P, col, thickness); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z", ExactSpelling = true)]
        private static extern void AddQuadFilled_PInvoke(ImDrawList* @this, Vector2* p1, Vector2* p2, Vector2* p3, Vector2* p4, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddQuadFilled(in Vector2 p1, in Vector2 p2, in Vector2 p3, in Vector2 p4, uint col)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p1P = &p1)
            fixed (Vector2* __p2P = &p2)
            fixed (Vector2* __p3P = &p3)
            fixed (Vector2* __p4P = &p4)
            { AddQuadFilled_PInvoke(@this, __p1P, __p2P, __p3P, __p4P, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z", ExactSpelling = true)]
        private static extern void AddTriangle_PInvoke(ImDrawList* @this, Vector2* p1, Vector2* p2, Vector2* p3, uint col, float thickness);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddTriangle(in Vector2 p1, in Vector2 p2, in Vector2 p3, uint col, float thickness = 1f)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p1P = &p1)
            fixed (Vector2* __p2P = &p2)
            fixed (Vector2* __p3P = &p3)
            { AddTriangle_PInvoke(@this, __p1P, __p2P, __p3P, col, thickness); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z", ExactSpelling = true)]
        private static extern void AddTriangleFilled_PInvoke(ImDrawList* @this, Vector2* p1, Vector2* p2, Vector2* p3, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddTriangleFilled(in Vector2 p1, in Vector2 p2, in Vector2 p3, uint col)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p1P = &p1)
            fixed (Vector2* __p2P = &p2)
            fixed (Vector2* __p3P = &p3)
            { AddTriangleFilled_PInvoke(@this, __p1P, __p2P, __p3P, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z", ExactSpelling = true)]
        private static extern void AddCircle_PInvoke(ImDrawList* @this, Vector2* center, float radius, uint col, int num_segments, float thickness);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddCircle(in Vector2 center, float radius, uint col, int num_segments = 0, float thickness = 1f)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __centerP = &center)
            { AddCircle_PInvoke(@this, __centerP, radius, col, num_segments, thickness); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z", ExactSpelling = true)]
        private static extern void AddCircleFilled_PInvoke(ImDrawList* @this, Vector2* center, float radius, uint col, int num_segments);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddCircleFilled(in Vector2 center, float radius, uint col, int num_segments = 0)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __centerP = &center)
            { AddCircleFilled_PInvoke(@this, __centerP, radius, col, num_segments); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z", ExactSpelling = true)]
        private static extern void AddNgon_PInvoke(ImDrawList* @this, Vector2* center, float radius, uint col, int num_segments, float thickness);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddNgon(in Vector2 center, float radius, uint col, int num_segments, float thickness = 1f)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __centerP = &center)
            { AddNgon_PInvoke(@this, __centerP, radius, col, num_segments, thickness); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z", ExactSpelling = true)]
        private static extern void AddNgonFilled_PInvoke(ImDrawList* @this, Vector2* center, float radius, uint col, int num_segments);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddNgonFilled(in Vector2 center, float radius, uint col, int num_segments)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __centerP = &center)
            { AddNgonFilled_PInvoke(@this, __centerP, radius, col, num_segments); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z", ExactSpelling = true)]
        private static extern void AddText_PInvoke(ImDrawList* @this, Vector2* pos, uint col, byte* text_begin, byte* text_end);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddText(in Vector2 pos, uint col, byte* text_begin, byte* text_end = null)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __posP = &pos)
            { AddText_PInvoke(@this, __posP, col, text_begin, text_end); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddText(in Vector2 pos, uint col, DearImGuiInterpolatedStringHandler text_begin)
        {
            ReadOnlySpan<byte> __text_begin = text_begin.NullTerminateAndGetString();

            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __posP = &pos)
            fixed (byte* __text_beginP = __text_begin)
            { AddText_PInvoke(@this, __posP, col, __text_beginP, __text_beginP + __text_begin.Length); }

            text_begin.Dispose();
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z", ExactSpelling = true)]
        private static extern void AddText_PInvoke(ImDrawList* @this, ImFont* font, float font_size, Vector2* pos, uint col, byte* text_begin, byte* text_end, float wrap_width, Vector4* cpu_fine_clip_rect);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddText(ImFont* font, float font_size, in Vector2 pos, uint col, byte* text_begin, byte* text_end = null, float wrap_width = 0f, Vector4* cpu_fine_clip_rect = null)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __posP = &pos)
            { AddText_PInvoke(@this, font, font_size, __posP, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddText(ImFont* font, float font_size, in Vector2 pos, uint col, DearImGuiInterpolatedStringHandler text_begin, float wrap_width = 0f, Vector4* cpu_fine_clip_rect = null)
        {
            ReadOnlySpan<byte> __text_begin = text_begin.NullTerminateAndGetString();

            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __posP = &pos)
            fixed (byte* __text_beginP = __text_begin)
            { AddText_PInvoke(@this, font, font_size, __posP, col, __text_beginP, __text_beginP + __text_begin.Length, wrap_width, cpu_fine_clip_rect); }

            text_begin.Dispose();
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z", ExactSpelling = true)]
        private static extern void AddPolyline_PInvoke(ImDrawList* @this, Vector2* points, int num_points, uint col, ImDrawFlags flags, float thickness);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddPolyline(Vector2* points, int num_points, uint col, ImDrawFlags flags, float thickness)
        {
            fixed (ImDrawList* @this = &this)
            { AddPolyline_PInvoke(@this, points, num_points, col, flags, thickness); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z", ExactSpelling = true)]
        private static extern void AddConvexPolyFilled_PInvoke(ImDrawList* @this, Vector2* points, int num_points, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddConvexPolyFilled(Vector2* points, int num_points, uint col)
        {
            fixed (ImDrawList* @this = &this)
            { AddConvexPolyFilled_PInvoke(@this, points, num_points, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z", ExactSpelling = true)]
        private static extern void AddBezierCubic_PInvoke(ImDrawList* @this, Vector2* p1, Vector2* p2, Vector2* p3, Vector2* p4, uint col, float thickness, int num_segments);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddBezierCubic(in Vector2 p1, in Vector2 p2, in Vector2 p3, in Vector2 p4, uint col, float thickness, int num_segments = 0)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p1P = &p1)
            fixed (Vector2* __p2P = &p2)
            fixed (Vector2* __p3P = &p3)
            fixed (Vector2* __p4P = &p4)
            { AddBezierCubic_PInvoke(@this, __p1P, __p2P, __p3P, __p4P, col, thickness, num_segments); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z", ExactSpelling = true)]
        private static extern void AddBezierQuadratic_PInvoke(ImDrawList* @this, Vector2* p1, Vector2* p2, Vector2* p3, uint col, float thickness, int num_segments);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddBezierQuadratic(in Vector2 p1, in Vector2 p2, in Vector2 p3, uint col, float thickness, int num_segments = 0)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p1P = &p1)
            fixed (Vector2* __p2P = &p2)
            fixed (Vector2* __p3P = &p3)
            { AddBezierQuadratic_PInvoke(@this, __p1P, __p2P, __p3P, col, thickness, num_segments); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z", ExactSpelling = true)]
        private static extern void AddImage_PInvoke(ImDrawList* @this, void* user_texture_id, Vector2* p_min, Vector2* p_max, Vector2* uv_min, Vector2* uv_max, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddImage(void* user_texture_id, in Vector2 p_min, in Vector2 p_max, in Vector2 uv_min, in Vector2 uv_max, uint col = 4294967295)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p_minP = &p_min)
            fixed (Vector2* __p_maxP = &p_max)
            fixed (Vector2* __uv_minP = &uv_min)
            fixed (Vector2* __uv_maxP = &uv_max)
            { AddImage_PInvoke(@this, user_texture_id, __p_minP, __p_maxP, __uv_minP, __uv_maxP, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z", ExactSpelling = true)]
        private static extern void AddImageQuad_PInvoke(ImDrawList* @this, void* user_texture_id, Vector2* p1, Vector2* p2, Vector2* p3, Vector2* p4, Vector2* uv1, Vector2* uv2, Vector2* uv3, Vector2* uv4, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddImageQuad(void* user_texture_id, in Vector2 p1, in Vector2 p2, in Vector2 p3, in Vector2 p4, in Vector2 uv1, in Vector2 uv2, in Vector2 uv3, in Vector2 uv4, uint col = 4294967295)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p1P = &p1)
            fixed (Vector2* __p2P = &p2)
            fixed (Vector2* __p3P = &p3)
            fixed (Vector2* __p4P = &p4)
            fixed (Vector2* __uv1P = &uv1)
            fixed (Vector2* __uv2P = &uv2)
            fixed (Vector2* __uv3P = &uv3)
            fixed (Vector2* __uv4P = &uv4)
            { AddImageQuad_PInvoke(@this, user_texture_id, __p1P, __p2P, __p3P, __p4P, __uv1P, __uv2P, __uv3P, __uv4P, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z", ExactSpelling = true)]
        private static extern void AddImageRounded_PInvoke(ImDrawList* @this, void* user_texture_id, Vector2* p_min, Vector2* p_max, Vector2* uv_min, Vector2* uv_max, uint col, float rounding, ImDrawFlags flags);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddImageRounded(void* user_texture_id, in Vector2 p_min, in Vector2 p_max, in Vector2 uv_min, in Vector2 uv_max, uint col, float rounding, ImDrawFlags flags = ImDrawFlags.None)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p_minP = &p_min)
            fixed (Vector2* __p_maxP = &p_max)
            fixed (Vector2* __uv_minP = &uv_min)
            fixed (Vector2* __uv_maxP = &uv_max)
            { AddImageRounded_PInvoke(@this, user_texture_id, __p_minP, __p_maxP, __uv_minP, __uv_maxP, col, rounding, flags); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathClear@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void PathClear_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathClear()
        {
            fixed (ImDrawList* @this = &this)
            { PathClear_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z", ExactSpelling = true)]
        private static extern void PathLineTo_PInvoke(ImDrawList* @this, Vector2* pos);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathLineTo(in Vector2 pos)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __posP = &pos)
            { PathLineTo_PInvoke(@this, __posP); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathLineToMergeDuplicate@ImDrawList@@QEAAXAEBUImVec2@@@Z", ExactSpelling = true)]
        private static extern void PathLineToMergeDuplicate_PInvoke(ImDrawList* @this, Vector2* pos);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathLineToMergeDuplicate(in Vector2 pos)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __posP = &pos)
            { PathLineToMergeDuplicate_PInvoke(@this, __posP); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathFillConvex@ImDrawList@@QEAAXI@Z", ExactSpelling = true)]
        private static extern void PathFillConvex_PInvoke(ImDrawList* @this, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathFillConvex(uint col)
        {
            fixed (ImDrawList* @this = &this)
            { PathFillConvex_PInvoke(@this, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathStroke@ImDrawList@@QEAAXIHM@Z", ExactSpelling = true)]
        private static extern void PathStroke_PInvoke(ImDrawList* @this, uint col, ImDrawFlags flags, float thickness);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathStroke(uint col, ImDrawFlags flags = ImDrawFlags.None, float thickness = 1f)
        {
            fixed (ImDrawList* @this = &this)
            { PathStroke_PInvoke(@this, col, flags, thickness); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z", ExactSpelling = true)]
        private static extern void PathArcTo_PInvoke(ImDrawList* @this, Vector2* center, float radius, float a_min, float a_max, int num_segments);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathArcTo(in Vector2 center, float radius, float a_min, float a_max, int num_segments = 0)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __centerP = &center)
            { PathArcTo_PInvoke(@this, __centerP, radius, a_min, a_max, num_segments); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z", ExactSpelling = true)]
        private static extern void PathArcToFast_PInvoke(ImDrawList* @this, Vector2* center, float radius, int a_min_of_12, int a_max_of_12);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathArcToFast(in Vector2 center, float radius, int a_min_of_12, int a_max_of_12)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __centerP = &center)
            { PathArcToFast_PInvoke(@this, __centerP, radius, a_min_of_12, a_max_of_12); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z", ExactSpelling = true)]
        private static extern void PathBezierCubicCurveTo_PInvoke(ImDrawList* @this, Vector2* p2, Vector2* p3, Vector2* p4, int num_segments);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathBezierCubicCurveTo(in Vector2 p2, in Vector2 p3, in Vector2 p4, int num_segments = 0)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p2P = &p2)
            fixed (Vector2* __p3P = &p3)
            fixed (Vector2* __p4P = &p4)
            { PathBezierCubicCurveTo_PInvoke(@this, __p2P, __p3P, __p4P, num_segments); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z", ExactSpelling = true)]
        private static extern void PathBezierQuadraticCurveTo_PInvoke(ImDrawList* @this, Vector2* p2, Vector2* p3, int num_segments);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathBezierQuadraticCurveTo(in Vector2 p2, in Vector2 p3, int num_segments = 0)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __p2P = &p2)
            fixed (Vector2* __p3P = &p3)
            { PathBezierQuadraticCurveTo_PInvoke(@this, __p2P, __p3P, num_segments); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z", ExactSpelling = true)]
        private static extern void PathRect_PInvoke(ImDrawList* @this, Vector2* rect_min, Vector2* rect_max, float rounding, ImDrawFlags flags);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PathRect(in Vector2 rect_min, in Vector2 rect_max, float rounding = 0f, ImDrawFlags flags = ImDrawFlags.None)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __rect_minP = &rect_min)
            fixed (Vector2* __rect_maxP = &rect_max)
            { PathRect_PInvoke(@this, __rect_minP, __rect_maxP, rounding, flags); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z", ExactSpelling = true)]
        private static extern void AddCallback_PInvoke(ImDrawList* @this, delegate* unmanaged[Cdecl]<ImDrawList*, ImDrawCmd*, void> callback, void* callback_data);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddCallback(delegate* unmanaged[Cdecl]<ImDrawList*, ImDrawCmd*, void> callback, void* callback_data)
        {
            fixed (ImDrawList* @this = &this)
            { AddCallback_PInvoke(@this, callback, callback_data); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddDrawCmd@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void AddDrawCmd_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddDrawCmd()
        {
            fixed (ImDrawList* @this = &this)
            { AddDrawCmd_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?CloneOutput@ImDrawList@@QEBAPEAU1@XZ", ExactSpelling = true)]
        private static extern ImDrawList* CloneOutput_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImDrawList* CloneOutput()
        {
            fixed (ImDrawList* @this = &this)
            { return CloneOutput_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ChannelsSplit@ImDrawList@@QEAAXH@Z", ExactSpelling = true)]
        private static extern void ChannelsSplit_PInvoke(ImDrawList* @this, int count);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ChannelsSplit(int count)
        {
            fixed (ImDrawList* @this = &this)
            { ChannelsSplit_PInvoke(@this, count); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ChannelsMerge@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void ChannelsMerge_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ChannelsMerge()
        {
            fixed (ImDrawList* @this = &this)
            { ChannelsMerge_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ChannelsSetCurrent@ImDrawList@@QEAAXH@Z", ExactSpelling = true)]
        private static extern void ChannelsSetCurrent_PInvoke(ImDrawList* @this, int n);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ChannelsSetCurrent(int n)
        {
            fixed (ImDrawList* @this = &this)
            { ChannelsSetCurrent_PInvoke(@this, n); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PrimReserve@ImDrawList@@QEAAXHH@Z", ExactSpelling = true)]
        private static extern void PrimReserve_PInvoke(ImDrawList* @this, int idx_count, int vtx_count);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PrimReserve(int idx_count, int vtx_count)
        {
            fixed (ImDrawList* @this = &this)
            { PrimReserve_PInvoke(@this, idx_count, vtx_count); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PrimUnreserve@ImDrawList@@QEAAXHH@Z", ExactSpelling = true)]
        private static extern void PrimUnreserve_PInvoke(ImDrawList* @this, int idx_count, int vtx_count);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PrimUnreserve(int idx_count, int vtx_count)
        {
            fixed (ImDrawList* @this = &this)
            { PrimUnreserve_PInvoke(@this, idx_count, vtx_count); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z", ExactSpelling = true)]
        private static extern void PrimRect_PInvoke(ImDrawList* @this, Vector2* a, Vector2* b, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PrimRect(in Vector2 a, in Vector2 b, uint col)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __aP = &a)
            fixed (Vector2* __bP = &b)
            { PrimRect_PInvoke(@this, __aP, __bP, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z", ExactSpelling = true)]
        private static extern void PrimRectUV_PInvoke(ImDrawList* @this, Vector2* a, Vector2* b, Vector2* uv_a, Vector2* uv_b, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PrimRectUV(in Vector2 a, in Vector2 b, in Vector2 uv_a, in Vector2 uv_b, uint col)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __aP = &a)
            fixed (Vector2* __bP = &b)
            fixed (Vector2* __uv_aP = &uv_a)
            fixed (Vector2* __uv_bP = &uv_b)
            { PrimRectUV_PInvoke(@this, __aP, __bP, __uv_aP, __uv_bP, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z", ExactSpelling = true)]
        private static extern void PrimQuadUV_PInvoke(ImDrawList* @this, Vector2* a, Vector2* b, Vector2* c, Vector2* d, Vector2* uv_a, Vector2* uv_b, Vector2* uv_c, Vector2* uv_d, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PrimQuadUV(in Vector2 a, in Vector2 b, in Vector2 c, in Vector2 d, in Vector2 uv_a, in Vector2 uv_b, in Vector2 uv_c, in Vector2 uv_d, uint col)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __aP = &a)
            fixed (Vector2* __bP = &b)
            fixed (Vector2* __cP = &c)
            fixed (Vector2* __dP = &d)
            fixed (Vector2* __uv_aP = &uv_a)
            fixed (Vector2* __uv_bP = &uv_b)
            fixed (Vector2* __uv_cP = &uv_c)
            fixed (Vector2* __uv_dP = &uv_d)
            { PrimQuadUV_PInvoke(@this, __aP, __bP, __cP, __dP, __uv_aP, __uv_bP, __uv_cP, __uv_dP, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z", ExactSpelling = true)]
        private static extern void PrimWriteVtx_PInvoke(ImDrawList* @this, Vector2* pos, Vector2* uv, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PrimWriteVtx(in Vector2 pos, in Vector2 uv, uint col)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __posP = &pos)
            fixed (Vector2* __uvP = &uv)
            { PrimWriteVtx_PInvoke(@this, __posP, __uvP, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PrimWriteIdx@ImDrawList@@QEAAXG@Z", ExactSpelling = true)]
        private static extern void PrimWriteIdx_PInvoke(ImDrawList* @this, ushort idx);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PrimWriteIdx(ushort idx)
        {
            fixed (ImDrawList* @this = &this)
            { PrimWriteIdx_PInvoke(@this, idx); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z", ExactSpelling = true)]
        private static extern void PrimVtx_PInvoke(ImDrawList* @this, Vector2* pos, Vector2* uv, uint col);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void PrimVtx(in Vector2 pos, in Vector2 uv, uint col)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __posP = &pos)
            fixed (Vector2* __uvP = &uv)
            { PrimVtx_PInvoke(@this, __posP, __uvP, col); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_ResetForNewFrame@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void _ResetForNewFrame_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void _ResetForNewFrame()
        {
            fixed (ImDrawList* @this = &this)
            { _ResetForNewFrame_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_ClearFreeMemory@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void _ClearFreeMemory_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void _ClearFreeMemory()
        {
            fixed (ImDrawList* @this = &this)
            { _ClearFreeMemory_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void _PopUnusedDrawCmd_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void _PopUnusedDrawCmd()
        {
            fixed (ImDrawList* @this = &this)
            { _PopUnusedDrawCmd_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void _TryMergeDrawCmds_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void _TryMergeDrawCmds()
        {
            fixed (ImDrawList* @this = &this)
            { _TryMergeDrawCmds_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_OnChangedClipRect@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void _OnChangedClipRect_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void _OnChangedClipRect()
        {
            fixed (ImDrawList* @this = &this)
            { _OnChangedClipRect_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_OnChangedTextureID@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void _OnChangedTextureID_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void _OnChangedTextureID()
        {
            fixed (ImDrawList* @this = &this)
            { _OnChangedTextureID_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ", ExactSpelling = true)]
        private static extern void _OnChangedVtxOffset_PInvoke(ImDrawList* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void _OnChangedVtxOffset()
        {
            fixed (ImDrawList* @this = &this)
            { _OnChangedVtxOffset_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z", ExactSpelling = true)]
        private static extern int _CalcCircleAutoSegmentCount_PInvoke(ImDrawList* @this, float radius);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int _CalcCircleAutoSegmentCount(float radius)
        {
            fixed (ImDrawList* @this = &this)
            { return _CalcCircleAutoSegmentCount_PInvoke(@this, radius); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z", ExactSpelling = true)]
        private static extern void _PathArcToFastEx_PInvoke(ImDrawList* @this, Vector2* center, float radius, int a_min_sample, int a_max_sample, int a_step);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void _PathArcToFastEx(in Vector2 center, float radius, int a_min_sample, int a_max_sample, int a_step)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __centerP = &center)
            { _PathArcToFastEx_PInvoke(@this, __centerP, radius, a_min_sample, a_max_sample, a_step); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z", ExactSpelling = true)]
        private static extern void _PathArcToN_PInvoke(ImDrawList* @this, Vector2* center, float radius, float a_min, float a_max, int num_segments);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void _PathArcToN(in Vector2 center, float radius, float a_min, float a_max, int num_segments)
        {
            fixed (ImDrawList* @this = &this)
            fixed (Vector2* __centerP = &center)
            { _PathArcToN_PInvoke(@this, __centerP, radius, a_min, a_max, num_segments); }
        }
    }
}
