// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.DearImGui.Infrastructure;
using Mochi.DearImGui.Internal;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.DearImGui
{
    [StructLayout(LayoutKind.Explicit, Size = 1168)]
    public unsafe partial struct ImFontAtlas
    {
        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0ImFontAtlas@@QEAA@XZ", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFontAtlas()
        {
            fixed (ImFontAtlas* @this = &this)
            { Constructor_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??1ImFontAtlas@@QEAA@XZ", ExactSpelling = true)]
        private static extern void Destructor_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Destructor()
        {
            fixed (ImFontAtlas* @this = &this)
            { Destructor_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z", ExactSpelling = true)]
        private static extern ImFont* AddFont_PInvoke(ImFontAtlas* @this, ImFontConfig* font_cfg);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFont* AddFont(ImFontConfig* font_cfg)
        {
            fixed (ImFontAtlas* @this = &this)
            { return AddFont_PInvoke(@this, font_cfg); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z", ExactSpelling = true)]
        private static extern ImFont* AddFontDefault_PInvoke(ImFontAtlas* @this, ImFontConfig* font_cfg);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFont* AddFontDefault(ImFontConfig* font_cfg = null)
        {
            fixed (ImFontAtlas* @this = &this)
            { return AddFontDefault_PInvoke(@this, font_cfg); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z", ExactSpelling = true)]
        private static extern ImFont* AddFontFromFileTTF_PInvoke(ImFontAtlas* @this, byte* filename, float size_pixels, ImFontConfig* font_cfg, char* glyph_ranges);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFont* AddFontFromFileTTF(byte* filename, float size_pixels, ImFontConfig* font_cfg = null, char* glyph_ranges = null)
        {
            fixed (ImFontAtlas* @this = &this)
            { return AddFontFromFileTTF_PInvoke(@this, filename, size_pixels, font_cfg, glyph_ranges); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFont* AddFontFromFileTTF(DearImGuiInterpolatedStringHandler filename, float size_pixels, ImFontConfig* font_cfg = null, char* glyph_ranges = null)
        {
            ImFont* __result;

            fixed (ImFontAtlas* @this = &this)
            fixed (byte* __filenameP = filename.NullTerminateAndGetString())
            { __result = AddFontFromFileTTF_PInvoke(@this, __filenameP, size_pixels, font_cfg, glyph_ranges); }

            filename.Dispose();
            return __result;
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z", ExactSpelling = true)]
        private static extern ImFont* AddFontFromMemoryTTF_PInvoke(ImFontAtlas* @this, void* font_data, int font_size, float size_pixels, ImFontConfig* font_cfg, char* glyph_ranges);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFont* AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, ImFontConfig* font_cfg = null, char* glyph_ranges = null)
        {
            fixed (ImFontAtlas* @this = &this)
            { return AddFontFromMemoryTTF_PInvoke(@this, font_data, font_size, size_pixels, font_cfg, glyph_ranges); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z", ExactSpelling = true)]
        private static extern ImFont* AddFontFromMemoryCompressedTTF_PInvoke(ImFontAtlas* @this, void* compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfig* font_cfg, char* glyph_ranges);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFont* AddFontFromMemoryCompressedTTF(void* compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfig* font_cfg = null, char* glyph_ranges = null)
        {
            fixed (ImFontAtlas* @this = &this)
            { return AddFontFromMemoryCompressedTTF_PInvoke(@this, compressed_font_data, compressed_font_size, size_pixels, font_cfg, glyph_ranges); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z", ExactSpelling = true)]
        private static extern ImFont* AddFontFromMemoryCompressedBase85TTF_PInvoke(ImFontAtlas* @this, byte* compressed_font_data_base85, float size_pixels, ImFontConfig* font_cfg, char* glyph_ranges);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFont* AddFontFromMemoryCompressedBase85TTF(byte* compressed_font_data_base85, float size_pixels, ImFontConfig* font_cfg = null, char* glyph_ranges = null)
        {
            fixed (ImFontAtlas* @this = &this)
            { return AddFontFromMemoryCompressedBase85TTF_PInvoke(@this, compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ClearInputData@ImFontAtlas@@QEAAXXZ", ExactSpelling = true)]
        private static extern void ClearInputData_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClearInputData()
        {
            fixed (ImFontAtlas* @this = &this)
            { ClearInputData_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ClearTexData@ImFontAtlas@@QEAAXXZ", ExactSpelling = true)]
        private static extern void ClearTexData_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClearTexData()
        {
            fixed (ImFontAtlas* @this = &this)
            { ClearTexData_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ClearFonts@ImFontAtlas@@QEAAXXZ", ExactSpelling = true)]
        private static extern void ClearFonts_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClearFonts()
        {
            fixed (ImFontAtlas* @this = &this)
            { ClearFonts_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?Clear@ImFontAtlas@@QEAAXXZ", ExactSpelling = true)]
        private static extern void Clear_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear()
        {
            fixed (ImFontAtlas* @this = &this)
            { Clear_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?Build@ImFontAtlas@@QEAA_NXZ", ExactSpelling = true)]
        private static extern byte Build_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Build()
        {
            byte __result;

            fixed (ImFontAtlas* @this = &this)
            { __result = Build_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z", ExactSpelling = true)]
        private static extern void GetTexDataAsAlpha8_PInvoke(ImFontAtlas* @this, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void GetTexDataAsAlpha8(byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = null)
        {
            fixed (ImFontAtlas* @this = &this)
            { GetTexDataAsAlpha8_PInvoke(@this, out_pixels, out_width, out_height, out_bytes_per_pixel); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z", ExactSpelling = true)]
        private static extern void GetTexDataAsRGBA32_PInvoke(ImFontAtlas* @this, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void GetTexDataAsRGBA32(byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = null)
        {
            fixed (ImFontAtlas* @this = &this)
            { GetTexDataAsRGBA32_PInvoke(@this, out_pixels, out_width, out_height, out_bytes_per_pixel); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsBuilt@ImFontAtlas@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsBuilt_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsBuilt()
        {
            byte __result;

            fixed (ImFontAtlas* @this = &this)
            { __result = IsBuilt_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?SetTexID@ImFontAtlas@@QEAAXPEAX@Z", ExactSpelling = true)]
        private static extern void SetTexID_PInvoke(ImFontAtlas* @this, void* id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetTexID(void* id)
        {
            fixed (ImFontAtlas* @this = &this)
            { SetTexID_PInvoke(@this, id); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
        private static extern char* GetGlyphRangesDefault_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public char* GetGlyphRangesDefault()
        {
            fixed (ImFontAtlas* @this = &this)
            { return GetGlyphRangesDefault_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
        private static extern char* GetGlyphRangesKorean_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public char* GetGlyphRangesKorean()
        {
            fixed (ImFontAtlas* @this = &this)
            { return GetGlyphRangesKorean_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
        private static extern char* GetGlyphRangesJapanese_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public char* GetGlyphRangesJapanese()
        {
            fixed (ImFontAtlas* @this = &this)
            { return GetGlyphRangesJapanese_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
        private static extern char* GetGlyphRangesChineseFull_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public char* GetGlyphRangesChineseFull()
        {
            fixed (ImFontAtlas* @this = &this)
            { return GetGlyphRangesChineseFull_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
        private static extern char* GetGlyphRangesChineseSimplifiedCommon_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public char* GetGlyphRangesChineseSimplifiedCommon()
        {
            fixed (ImFontAtlas* @this = &this)
            { return GetGlyphRangesChineseSimplifiedCommon_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
        private static extern char* GetGlyphRangesCyrillic_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public char* GetGlyphRangesCyrillic()
        {
            fixed (ImFontAtlas* @this = &this)
            { return GetGlyphRangesCyrillic_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
        private static extern char* GetGlyphRangesThai_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public char* GetGlyphRangesThai()
        {
            fixed (ImFontAtlas* @this = &this)
            { return GetGlyphRangesThai_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
        private static extern char* GetGlyphRangesVietnamese_PInvoke(ImFontAtlas* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public char* GetGlyphRangesVietnamese()
        {
            fixed (ImFontAtlas* @this = &this)
            { return GetGlyphRangesVietnamese_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z", ExactSpelling = true)]
        private static extern int AddCustomRectRegular_PInvoke(ImFontAtlas* @this, int width, int height);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int AddCustomRectRegular(int width, int height)
        {
            fixed (ImFontAtlas* @this = &this)
            { return AddCustomRectRegular_PInvoke(@this, width, height); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z", ExactSpelling = true)]
        private static extern int AddCustomRectFontGlyph_PInvoke(ImFontAtlas* @this, ImFont* font, char id, int width, int height, float advance_x, Vector2* offset);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int AddCustomRectFontGlyph(ImFont* font, char id, int width, int height, float advance_x, in Vector2 offset)
        {
            fixed (ImFontAtlas* @this = &this)
            fixed (Vector2* __offsetP = &offset)
            { return AddCustomRectFontGlyph_PInvoke(@this, font, id, width, height, advance_x, __offsetP); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z", ExactSpelling = true)]
        private static extern ImFontAtlasCustomRect* GetCustomRectByIndex_PInvoke(ImFontAtlas* @this, int index);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFontAtlasCustomRect* GetCustomRectByIndex(int index)
        {
            fixed (ImFontAtlas* @this = &this)
            { return GetCustomRectByIndex_PInvoke(@this, index); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z", ExactSpelling = true)]
        private static extern void CalcCustomRectUV_PInvoke(ImFontAtlas* @this, ImFontAtlasCustomRect* rect, Vector2* out_uv_min, Vector2* out_uv_max);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CalcCustomRectUV(ImFontAtlasCustomRect* rect, Vector2* out_uv_min, Vector2* out_uv_max)
        {
            fixed (ImFontAtlas* @this = &this)
            { CalcCustomRectUV_PInvoke(@this, rect, out_uv_min, out_uv_max); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z", ExactSpelling = true)]
        private static extern byte GetMouseCursorTexData_PInvoke(ImFontAtlas* @this, ImGuiMouseCursor cursor, Vector2* out_offset, Vector2* out_size, ConstantArray_ImVec2_2* out_uv_border, ConstantArray_ImVec2_2* out_uv_fill);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool GetMouseCursorTexData(ImGuiMouseCursor cursor, Vector2* out_offset, Vector2* out_size, ConstantArray_ImVec2_2* out_uv_border, ConstantArray_ImVec2_2* out_uv_fill)
        {
            byte __result;

            fixed (ImFontAtlas* @this = &this)
            { __result = GetMouseCursorTexData_PInvoke(@this, cursor, out_offset, out_size, out_uv_border, out_uv_fill); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [FieldOffset(0)] public ImFontAtlasFlags Flags;

        [FieldOffset(8)] public void* TexID;

        [FieldOffset(16)] public int TexDesiredWidth;

        [FieldOffset(20)] public int TexGlyphPadding;

        [FieldOffset(24)] [MarshalAs(UnmanagedType.I1)] public bool Locked;

        [FieldOffset(25)] [MarshalAs(UnmanagedType.I1)] public bool TexReady;

        [FieldOffset(26)] [MarshalAs(UnmanagedType.I1)] public bool TexPixelsUseColors;

        [FieldOffset(32)] public byte* TexPixelsAlpha8;

        [FieldOffset(40)] public uint* TexPixelsRGBA32;

        [FieldOffset(48)] public int TexWidth;

        [FieldOffset(52)] public int TexHeight;

        [FieldOffset(56)] public Vector2 TexUvScale;

        [FieldOffset(64)] public Vector2 TexUvWhitePixel;

        [FieldOffset(72)] public ImVector<Pointer<ImFont>> Fonts;

        [FieldOffset(88)] public ImVector<ImFontAtlasCustomRect> CustomRects;

        [FieldOffset(104)] public ImVector<ImFontConfig> ConfigData;

        [FieldOffset(120)] public ConstantArray_ImVec4_64 TexUvLines;

        [FieldOffset(1144)] public ImFontBuilderIO* FontBuilderIO;

        [FieldOffset(1152)] public uint FontBuilderFlags;

        [FieldOffset(1156)] public int PackIdMouseCursors;

        [FieldOffset(1160)] public int PackIdLines;
    }
}
