// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.DearImGui.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.DearImGui
{
    [StructLayout(LayoutKind.Explicit, Size = 64)]
    public unsafe partial struct ImGuiPayload
    {
        [FieldOffset(0)] public void* Data;

        [FieldOffset(8)] public int DataSize;

        [FieldOffset(12)] public uint SourceId;

        [FieldOffset(16)] public uint SourceParentId;

        [FieldOffset(20)] public int DataFrameCount;

        [FieldOffset(24)] public ConstantArray_char_33 DataType;

        [FieldOffset(57)] [MarshalAs(UnmanagedType.I1)] public bool Preview;

        [FieldOffset(58)] [MarshalAs(UnmanagedType.I1)] public bool Delivery;

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper1", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(ImGuiPayload* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImGuiPayload()
        {
            fixed (ImGuiPayload* @this = &this)
            { Constructor_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?Clear@ImGuiPayload@@QEAAXXZ", ExactSpelling = true)]
        private static extern void Clear_PInvoke(ImGuiPayload* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear()
        {
            fixed (ImGuiPayload* @this = &this)
            { Clear_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsDataType@ImGuiPayload@@QEBA_NPEBD@Z", ExactSpelling = true)]
        private static extern byte IsDataType_PInvoke(ImGuiPayload* @this, byte* type);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsDataType(byte* type)
        {
            byte __result;

            fixed (ImGuiPayload* @this = &this)
            { __result = IsDataType_PInvoke(@this, type); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsDataType(DearImGuiInterpolatedStringHandler type)
        {
            byte __result;

            fixed (ImGuiPayload* @this = &this)
            fixed (byte* __typeP = type.NullTerminateAndGetString())
            { __result = IsDataType_PInvoke(@this, __typeP); }

            type.Dispose();
            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsPreview@ImGuiPayload@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsPreview_PInvoke(ImGuiPayload* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsPreview()
        {
            byte __result;

            fixed (ImGuiPayload* @this = &this)
            { __result = IsPreview_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsDelivery@ImGuiPayload@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsDelivery_PInvoke(ImGuiPayload* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsDelivery()
        {
            byte __result;

            fixed (ImGuiPayload* @this = &this)
            { __result = IsDelivery_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }
    }
}
