// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.DearImGui.Infrastructure;
using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.DearImGui
{
    [StructLayout(LayoutKind.Explicit, Size = 280)]
    public unsafe partial struct ImGuiTextFilter
    {
        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0ImGuiTextFilter@@QEAA@PEBD@Z", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(ImGuiTextFilter* @this, byte* default_filter);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImGuiTextFilter(byte* default_filter)
        {
            fixed (ImGuiTextFilter* @this = &this)
            { Constructor_PInvoke(@this, default_filter); }
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImGuiTextFilter(DearImGuiInterpolatedStringHandler default_filter)
        {
            fixed (ImGuiTextFilter* @this = &this)
            fixed (byte* __default_filterP = default_filter.NullTerminateAndGetString())
            { Constructor_PInvoke(@this, __default_filterP); }

            default_filter.Dispose();
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?Draw@ImGuiTextFilter@@QEAA_NPEBDM@Z", ExactSpelling = true)]
        private static extern byte Draw_PInvoke(ImGuiTextFilter* @this, byte* label, float width);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Draw(byte* label, float width = 0f)
        {
            byte __result;

            fixed (ImGuiTextFilter* @this = &this)
            { __result = Draw_PInvoke(@this, label, width); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Draw(DearImGuiInterpolatedStringHandler label, float width = 0f)
        {
            byte __result;

            fixed (ImGuiTextFilter* @this = &this)
            fixed (byte* __labelP = label.NullTerminateAndGetString())
            { __result = Draw_PInvoke(@this, __labelP, width); }

            label.Dispose();
            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?PassFilter@ImGuiTextFilter@@QEBA_NPEBD0@Z", ExactSpelling = true)]
        private static extern byte PassFilter_PInvoke(ImGuiTextFilter* @this, byte* text, byte* text_end);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool PassFilter(byte* text, byte* text_end = null)
        {
            byte __result;

            fixed (ImGuiTextFilter* @this = &this)
            { __result = PassFilter_PInvoke(@this, text, text_end); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool PassFilter(DearImGuiInterpolatedStringHandler text)
        {
            byte __result;
            ReadOnlySpan<byte> __text = text.NullTerminateAndGetString();

            fixed (ImGuiTextFilter* @this = &this)
            fixed (byte* __textP = __text)
            { __result = PassFilter_PInvoke(@this, __textP, __textP + __text.Length); }

            text.Dispose();
            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?Build@ImGuiTextFilter@@QEAAXXZ", ExactSpelling = true)]
        private static extern void Build_PInvoke(ImGuiTextFilter* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Build()
        {
            fixed (ImGuiTextFilter* @this = &this)
            { Build_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?Clear@ImGuiTextFilter@@QEAAXXZ", ExactSpelling = true)]
        private static extern void Clear_PInvoke(ImGuiTextFilter* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Clear()
        {
            fixed (ImGuiTextFilter* @this = &this)
            { Clear_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsActive@ImGuiTextFilter@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsActive_PInvoke(ImGuiTextFilter* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsActive()
        {
            byte __result;

            fixed (ImGuiTextFilter* @this = &this)
            { __result = IsActive_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct ImGuiTextRange
        {
            [FieldOffset(0)] public byte* b;

            [FieldOffset(8)] public byte* e;

            [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper5", ExactSpelling = true)]
            private static extern void Constructor_PInvoke(ImGuiTextRange* @this);

            [DebuggerStepThrough, DebuggerHidden]
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ImGuiTextRange()
            {
                fixed (ImGuiTextRange* @this = &this)
                { Constructor_PInvoke(@this); }
            }

            [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper6", ExactSpelling = true)]
            private static extern void Constructor_PInvoke(ImGuiTextRange* @this, byte* _b, byte* _e);

            [DebuggerStepThrough, DebuggerHidden]
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ImGuiTextRange(byte* _b, byte* _e)
            {
                fixed (ImGuiTextRange* @this = &this)
                { Constructor_PInvoke(@this, _b, _e); }
            }

            [DebuggerStepThrough, DebuggerHidden]
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public ImGuiTextRange(DearImGuiInterpolatedStringHandler _b, DearImGuiInterpolatedStringHandler _e)
            {
                fixed (ImGuiTextRange* @this = &this)
                fixed (byte* ___bP = _b.NullTerminateAndGetString())
                fixed (byte* ___eP = _e.NullTerminateAndGetString())
                { Constructor_PInvoke(@this, ___bP, ___eP); }

                _b.Dispose();
                _e.Dispose();
            }

            [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?empty@ImGuiTextRange@ImGuiTextFilter@@QEBA_NXZ", ExactSpelling = true)]
            private static extern byte empty_PInvoke(ImGuiTextRange* @this);

            [DebuggerStepThrough, DebuggerHidden]
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool empty()
            {
                byte __result;

                fixed (ImGuiTextRange* @this = &this)
                { __result = empty_PInvoke(@this); }

                return Unsafe.As<byte, bool>(ref __result);
            }

            [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?split@ImGuiTextRange@ImGuiTextFilter@@QEBAXDPEAU?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@@Z", ExactSpelling = true)]
            private static extern void split_PInvoke(ImGuiTextRange* @this, byte separator, ImVector<ImGuiTextRange>* @out);

            [DebuggerStepThrough, DebuggerHidden]
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public void split(byte separator, ImVector<ImGuiTextRange>* @out)
            {
                fixed (ImGuiTextRange* @this = &this)
                { split_PInvoke(@this, separator, @out); }
            }
        }

        [FieldOffset(0)] public ConstantArray_char_256 InputBuf;

        [FieldOffset(256)] public ImVector<ImGuiTextRange> Filters;

        [FieldOffset(272)] public int CountGrep;
    }
}
