// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using Mochi.DearImGui.Infrastructure;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.DearImGui.Internal
{
    [StructLayout(LayoutKind.Explicit, Size = 208)]
    public unsafe partial struct ImGuiDockNode
    {
        [FieldOffset(0)] public uint ID;

        [FieldOffset(4)] public ImGuiDockNodeFlags SharedFlags;

        [FieldOffset(8)] public ImGuiDockNodeFlags LocalFlags;

        [FieldOffset(12)] public ImGuiDockNodeFlags LocalFlagsInWindows;

        [FieldOffset(16)] public ImGuiDockNodeFlags MergedFlags;

        [FieldOffset(20)] public ImGuiDockNodeState State;

        [FieldOffset(24)] public ImGuiDockNode* ParentNode;

        [FieldOffset(32)] public ConstantArray_ImGuiDockNode__UNICODE_0020____UNICODE_002A___2 ChildNodes;

        [FieldOffset(48)] public ImVector<Pointer<ImGuiWindow>> Windows;

        [FieldOffset(64)] public ImGuiTabBar* TabBar;

        [FieldOffset(72)] public Vector2 Pos;

        [FieldOffset(80)] public Vector2 Size;

        [FieldOffset(88)] public Vector2 SizeRef;

        [FieldOffset(96)] public ImGuiAxis SplitAxis;

        [FieldOffset(100)] public ImGuiWindowClass WindowClass;

        [FieldOffset(128)] public uint LastBgColor;

        [FieldOffset(136)] public ImGuiWindow* HostWindow;

        [FieldOffset(144)] public ImGuiWindow* VisibleWindow;

        [FieldOffset(152)] public ImGuiDockNode* CentralNode;

        [FieldOffset(160)] public ImGuiDockNode* OnlyNodeWithWindows;

        [FieldOffset(168)] public int CountNodeWithWindows;

        [FieldOffset(172)] public int LastFrameAlive;

        [FieldOffset(176)] public int LastFrameActive;

        [FieldOffset(180)] public int LastFrameFocused;

        [FieldOffset(184)] public uint LastFocusedNodeId;

        [FieldOffset(188)] public uint SelectedTabId;

        [FieldOffset(192)] public uint WantCloseTabId;

        [FieldOffset(196)] private uint __AuthorityForPos__backingField;
        public ImGuiDataAuthority AuthorityForPos
        {
            get => (ImGuiDataAuthority)((__AuthorityForPos__backingField >> 0) & 0x7U);
            set
            {
                uint shiftedValue = (((uint)value) & 0x7U) << 0;
                uint otherBits = __AuthorityForPos__backingField & 0xFFFFFFF8U;
                __AuthorityForPos__backingField = otherBits | shiftedValue;
            }
        }

        [FieldOffset(196)] private uint __AuthorityForSize__backingField;
        public ImGuiDataAuthority AuthorityForSize
        {
            get => (ImGuiDataAuthority)((__AuthorityForSize__backingField >> 3) & 0x7U);
            set
            {
                uint shiftedValue = (((uint)value) & 0x7U) << 3;
                uint otherBits = __AuthorityForSize__backingField & 0xFFFFFFC7U;
                __AuthorityForSize__backingField = otherBits | shiftedValue;
            }
        }

        [FieldOffset(196)] private uint __AuthorityForViewport__backingField;
        public ImGuiDataAuthority AuthorityForViewport
        {
            get => (ImGuiDataAuthority)((__AuthorityForViewport__backingField >> 6) & 0x7U);
            set
            {
                uint shiftedValue = (((uint)value) & 0x7U) << 6;
                uint otherBits = __AuthorityForViewport__backingField & 0xFFFFFE3FU;
                __AuthorityForViewport__backingField = otherBits | shiftedValue;
            }
        }

        [FieldOffset(200)] private byte __IsVisible__backingField;
        public bool IsVisible
        {
            get => ((__IsVisible__backingField >> 0) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 0;
                uint otherBits = __IsVisible__backingField & 0xFEU;
                __IsVisible__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(200)] private byte __IsFocused__backingField;
        public bool IsFocused
        {
            get => ((__IsFocused__backingField >> 1) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 1;
                uint otherBits = __IsFocused__backingField & 0xFDU;
                __IsFocused__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(200)] private byte __IsBgDrawnThisFrame__backingField;
        public bool IsBgDrawnThisFrame
        {
            get => ((__IsBgDrawnThisFrame__backingField >> 2) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 2;
                uint otherBits = __IsBgDrawnThisFrame__backingField & 0xFBU;
                __IsBgDrawnThisFrame__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(200)] private byte __HasCloseButton__backingField;
        public bool HasCloseButton
        {
            get => ((__HasCloseButton__backingField >> 3) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 3;
                uint otherBits = __HasCloseButton__backingField & 0xF7U;
                __HasCloseButton__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(200)] private byte __HasWindowMenuButton__backingField;
        public bool HasWindowMenuButton
        {
            get => ((__HasWindowMenuButton__backingField >> 4) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 4;
                uint otherBits = __HasWindowMenuButton__backingField & 0xEFU;
                __HasWindowMenuButton__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(200)] private byte __HasCentralNodeChild__backingField;
        public bool HasCentralNodeChild
        {
            get => ((__HasCentralNodeChild__backingField >> 5) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 5;
                uint otherBits = __HasCentralNodeChild__backingField & 0xDFU;
                __HasCentralNodeChild__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(200)] private byte __WantCloseAll__backingField;
        public bool WantCloseAll
        {
            get => ((__WantCloseAll__backingField >> 6) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 6;
                uint otherBits = __WantCloseAll__backingField & 0xBFU;
                __WantCloseAll__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(200)] private byte __WantLockSizeOnce__backingField;
        public bool WantLockSizeOnce
        {
            get => ((__WantLockSizeOnce__backingField >> 7) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 7;
                uint otherBits = __WantLockSizeOnce__backingField & 0x7FU;
                __WantLockSizeOnce__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(201)] private byte __WantMouseMove__backingField;
        public bool WantMouseMove
        {
            get => ((__WantMouseMove__backingField >> 0) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 0;
                uint otherBits = __WantMouseMove__backingField & 0xFEU;
                __WantMouseMove__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(201)] private byte __WantHiddenTabBarUpdate__backingField;
        public bool WantHiddenTabBarUpdate
        {
            get => ((__WantHiddenTabBarUpdate__backingField >> 1) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 1;
                uint otherBits = __WantHiddenTabBarUpdate__backingField & 0xFDU;
                __WantHiddenTabBarUpdate__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(201)] private byte __WantHiddenTabBarToggle__backingField;
        public bool WantHiddenTabBarToggle
        {
            get => ((__WantHiddenTabBarToggle__backingField >> 2) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 2;
                uint otherBits = __WantHiddenTabBarToggle__backingField & 0xFBU;
                __WantHiddenTabBarToggle__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0ImGuiDockNode@@QEAA@I@Z", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(ImGuiDockNode* @this, uint id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImGuiDockNode(uint id)
        {
            fixed (ImGuiDockNode* @this = &this)
            { Constructor_PInvoke(@this, id); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??1ImGuiDockNode@@QEAA@XZ", ExactSpelling = true)]
        private static extern void Destructor_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Destructor()
        {
            fixed (ImGuiDockNode* @this = &this)
            { Destructor_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsRootNode@ImGuiDockNode@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsRootNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsRootNode()
        {
            byte __result;

            fixed (ImGuiDockNode* @this = &this)
            { __result = IsRootNode_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsDockSpace@ImGuiDockNode@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsDockSpace_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsDockSpace()
        {
            byte __result;

            fixed (ImGuiDockNode* @this = &this)
            { __result = IsDockSpace_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsFloatingNode@ImGuiDockNode@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsFloatingNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsFloatingNode()
        {
            byte __result;

            fixed (ImGuiDockNode* @this = &this)
            { __result = IsFloatingNode_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsCentralNode@ImGuiDockNode@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsCentralNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsCentralNode()
        {
            byte __result;

            fixed (ImGuiDockNode* @this = &this)
            { __result = IsCentralNode_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsHiddenTabBar@ImGuiDockNode@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsHiddenTabBar_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsHiddenTabBar()
        {
            byte __result;

            fixed (ImGuiDockNode* @this = &this)
            { __result = IsHiddenTabBar_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsNoTabBar@ImGuiDockNode@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsNoTabBar_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsNoTabBar()
        {
            byte __result;

            fixed (ImGuiDockNode* @this = &this)
            { __result = IsNoTabBar_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsSplitNode@ImGuiDockNode@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsSplitNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsSplitNode()
        {
            byte __result;

            fixed (ImGuiDockNode* @this = &this)
            { __result = IsSplitNode_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsLeafNode@ImGuiDockNode@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsLeafNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsLeafNode()
        {
            byte __result;

            fixed (ImGuiDockNode* @this = &this)
            { __result = IsLeafNode_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsEmpty@ImGuiDockNode@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte IsEmpty_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsEmpty()
        {
            byte __result;

            fixed (ImGuiDockNode* @this = &this)
            { __result = IsEmpty_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?Rect@ImGuiDockNode@@QEBA?AUImRect@@XZ", ExactSpelling = true)]
        private static extern ImRect* Rect_PInvoke(ImGuiDockNode* @this, ImRect* __returnBuffer);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImRect Rect()
        {
            ImRect __returnBuffer;

            fixed (ImGuiDockNode* @this = &this)
            { Rect_PInvoke(@this, &__returnBuffer); }

            return __returnBuffer;
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?SetLocalFlags@ImGuiDockNode@@QEAAXH@Z", ExactSpelling = true)]
        private static extern void SetLocalFlags_PInvoke(ImGuiDockNode* @this, ImGuiDockNodeFlags flags);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetLocalFlags(ImGuiDockNodeFlags flags)
        {
            fixed (ImGuiDockNode* @this = &this)
            { SetLocalFlags_PInvoke(@this, flags); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?UpdateMergedFlags@ImGuiDockNode@@QEAAXXZ", ExactSpelling = true)]
        private static extern void UpdateMergedFlags_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void UpdateMergedFlags()
        {
            fixed (ImGuiDockNode* @this = &this)
            { UpdateMergedFlags_PInvoke(@this); }
        }
    }
}
