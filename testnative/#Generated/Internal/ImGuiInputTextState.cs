// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Mochi.DearImGui.Internal
{
    [StructLayout(LayoutKind.Explicit, Size = 3720)]
    public unsafe partial struct ImGuiInputTextState
    {
        [FieldOffset(0)] public uint ID;

        [FieldOffset(4)] public int CurLenW;

        [FieldOffset(8)] public int CurLenA;

        [FieldOffset(16)] public ImVector<ushort> TextW;

        [FieldOffset(32)] public ImVector<byte> TextA;

        [FieldOffset(48)] public ImVector<byte> InitialTextA;

        [FieldOffset(64)] [MarshalAs(UnmanagedType.I1)] public bool TextAIsValid;

        [FieldOffset(68)] public int BufCapacityA;

        [FieldOffset(72)] public float ScrollX;

        [FieldOffset(3704)] public float CursorAnim;

        [FieldOffset(3708)] [MarshalAs(UnmanagedType.I1)] public bool CursorFollow;

        [FieldOffset(3709)] [MarshalAs(UnmanagedType.I1)] public bool SelectedAllMouseLock;

        [FieldOffset(3710)] [MarshalAs(UnmanagedType.I1)] public bool Edited;

        [FieldOffset(3712)] public ImGuiInputTextFlags Flags;

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "__InlineHelper33", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImGuiInputTextState()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { Constructor_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ClearText@ImGuiInputTextState@@QEAAXXZ", ExactSpelling = true)]
        private static extern void ClearText_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClearText()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { ClearText_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ClearFreeMemory@ImGuiInputTextState@@QEAAXXZ", ExactSpelling = true)]
        private static extern void ClearFreeMemory_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClearFreeMemory()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { ClearFreeMemory_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetUndoAvailCount@ImGuiInputTextState@@QEBAHXZ", ExactSpelling = true)]
        private static extern int GetUndoAvailCount_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetUndoAvailCount()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { return GetUndoAvailCount_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetRedoAvailCount@ImGuiInputTextState@@QEBAHXZ", ExactSpelling = true)]
        private static extern int GetRedoAvailCount_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetRedoAvailCount()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { return GetRedoAvailCount_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z", ExactSpelling = true)]
        private static extern void OnKeyPressed_PInvoke(ImGuiInputTextState* @this, int key);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void OnKeyPressed(int key)
        {
            fixed (ImGuiInputTextState* @this = &this)
            { OnKeyPressed_PInvoke(@this, key); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ", ExactSpelling = true)]
        private static extern void CursorAnimReset_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CursorAnimReset()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { CursorAnimReset_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?CursorClamp@ImGuiInputTextState@@QEAAXXZ", ExactSpelling = true)]
        private static extern void CursorClamp_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CursorClamp()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { CursorClamp_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?HasSelection@ImGuiInputTextState@@QEBA_NXZ", ExactSpelling = true)]
        private static extern byte HasSelection_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool HasSelection()
        {
            byte __result;

            fixed (ImGuiInputTextState* @this = &this)
            { __result = HasSelection_PInvoke(@this); }

            return Unsafe.As<byte, bool>(ref __result);
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ClearSelection@ImGuiInputTextState@@QEAAXXZ", ExactSpelling = true)]
        private static extern void ClearSelection_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClearSelection()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { ClearSelection_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetCursorPos@ImGuiInputTextState@@QEBAHXZ", ExactSpelling = true)]
        private static extern int GetCursorPos_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetCursorPos()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { return GetCursorPos_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetSelectionStart@ImGuiInputTextState@@QEBAHXZ", ExactSpelling = true)]
        private static extern int GetSelectionStart_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetSelectionStart()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { return GetSelectionStart_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetSelectionEnd@ImGuiInputTextState@@QEBAHXZ", ExactSpelling = true)]
        private static extern int GetSelectionEnd_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetSelectionEnd()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { return GetSelectionEnd_PInvoke(@this); }
        }

        [DllImport("Mochi.DearImGui.Native", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?SelectAll@ImGuiInputTextState@@QEAAXXZ", ExactSpelling = true)]
        private static extern void SelectAll_PInvoke(ImGuiInputTextState* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SelectAll()
        {
            fixed (ImGuiInputTextState* @this = &this)
            { SelectAll_PInvoke(@this); }
        }
    }
}
